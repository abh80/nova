#!/bin/bash
. "$(dirname "$0")/_/husky.sh"

# Love you ChatGPT ❤️
echo
echo "🚀 Starting pre hooks..."
printf "\b-----------------------\n"


confirm() {
    read -r -p "$1 [y/N]: " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# I am forcing these checks, use `confirm` to ask for it

echo "🛠️ Running Terraform check..."
echo "-------------------------"

# Navigate to the terraform directory
if [ -d terraform ]; then
  cd terraform || { echo "❌ Failed to enter 'terraform' directory"; exit 1; }
else
  echo "❌ Directory 'terraform' does not exist"
  exit 1
fi


# Find all directories containing .tf files
directories=$(find . -type f -name "*.tf" -exec dirname {} \; | sort -u)

# Loop through each directory and run terraform validate
for dir in $directories; do
  echo "🔍 Checking directory: $dir"
  cd "$dir" || continue

  # Validate the configuration quietly
  run_terraform_validate() {
    terraform validate > /dev/null 2>&1
    return $?
  }

  # Function to run terraform fmt -check and check its exit code
  run_terraform_fmt_check() {
    output=$(terraform fmt -write=false)
    if [ -z "$output" ]; then
        return 0
    else
        echo "📂 Some files need formatting in '$dir':"
        echo "$output"
        return 1
    fi
  }

  # Run terraform validate
  run_terraform_validate
  validate_exit_code=$?

  # Check if the validation was successful
  if [ $validate_exit_code -eq 0 ]; then
    echo "✅ Validation successful in $dir"
    # Run terraform fmt -check
    run_terraform_fmt_check
    fmt_exit_code=$?
    if [ $fmt_exit_code -ne 0 ]; then
      echo "❌ Terraform files are not formatted correctly in $dir."
      confirm "⚙️ Would you like to format the files now?" && terraform fmt
      exit 1
    fi
  else
    echo "❌ Validation failed in $dir"
    terraform validate
    confirm "⚙️ Would you like to attempt to fix the issues now?" && exit 1
  fi

  cd - > /dev/null 2>&1
done

cd ..
printf "\n------------------------\n"
echo "🛠️ Running Scalafmt check..."
echo "------------------------"

scalafmt_output=$(scalafmt.bat --check --quiet 2>&1)
scalafmt_exit_code=$?

# Check if scalafmt failed
if [ $scalafmt_exit_code -ne 0 ]; then
  echo "❌ Scalafmt check failed. Files not properly formatted:"
  scalafmt.bat --list
  confirm "⚙️ Would you like to format the files now?" && scalafmt.bat --fix
  exit 1
else
  echo "✅ All files are properly formatted."
fi

echo
echo "🎉 Pre commit hook completed."
echo

exit 0
